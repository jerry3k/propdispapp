// This file is generated by Nasir Scripts
var Page = 1;
var Rows = '';
var is_loading = true;

var placeSearch, autocomplete, map, marker, infoWindow, mylocation;
var componentForm = {
	street_number: 'short_name',
	route: 'long_name',
	locality: 'long_name',
	administrative_area_level_1: 'short_name',
	country: 'long_name',
	postal_code: 'short_name'
};

$( function() {

	load_data();

	$( document ).on( 'click', '.add_user', function( e ) {
		e.preventDefault();
		$( '#add_user' ).modal( 'show' );
		$( '#client_div' ).hide();
		$( '.phone_field' ).hide();
		$( '.append_style' ).attr( 'style', '' );
		$( "#form1 input[name=id]" ).val( '0' );
		$( "#form1 .change_type" ).attr( 'checked', false ).uniform();
		$( '#form1 #btn_reset' ).trigger( 'click' );
	} );

	$( document ).on( 'click', '.edit', function( e ) {
		e.preventDefault();
		let id = $( this ).attr( 'data-id' );
		loading( 'row_id_' + id );
		$( ".change_type" ).attr( 'checked', false ).uniform();
		$.ajax( {
			url: DOMAIN_URL + 'staff/load_data',
			method: 'post',
			data: { id: id },
			success: function( d ) {
				unloading( 'row_id_' + id );
				if ( !empty( d.rows ) ) {
					let row = d.rows[ 0 ];
					$( '#add_user' ).modal( 'show' );

					$( "#form1 input[name=id]" ).val( row.id );
					$( "#form1 input[name=username]" ).val( row.username );
					$( '#form1 input[name=type][value="' + row.type + '"]' ).attr( 'checked', true ).uniform();

					// ************************************************ \\
					// ************************************************ \\
					// ************************************************ \\

					if ( isset( row.type ) && row.type == 'fitter' ) {
						$( "#form1 input[name=email]" ).val( row.username );
						$( '#userinfo' ).attr( 'type', 'text' );
						$( '#userinfo' ).attr( 'title', 'Username field is required' );
					} else {
						$( "#form1 input[name=email]" ).val( row.email );
						$( '#userinfo' ).attr( 'type', 'email' );
						$( '#userinfo' ).attr( 'title', 'Email field is required' );
					}
					$( '.phone_field' ).hide();

					if ( !empty( row.type ) && row.type == 'client' ) {
						$( '#client_div' ).show();
						$( '.phone_field' ).show();
						$( "#form1 input[name=phone]" ).val( row.phone );
						$( '#form1 input[name=email_contact]' ).val( row.email_contact );
						$( '#form1 input[name=telephone]' ).val( row.telephone );
						$( '#form1 input[name=username]' ).val( row.username );
						if ( !empty( row.fsb_let_bd ) ) {
							$( "#form1 input[name=fsb_let_bd]" ).prop( 'checked', false ).uniform();
							$( "#form1 input[name=fsb_let_bd][value='" + row.fsb_let_bd + "']" ).prop( 'checked', true ).uniform();
						}
						$( '#form1 input[name=address1]' ).val( row.address1 );
						$( '#form1 input[name=address2]' ).val( row.address2 );
						$( '#form1 input[name=address3]' ).val( row.address3 );
						$( '#form1 input[name=latitude]' ).val( row.latitude );
						$( '#form1 input[name=longitude]' ).val( row.longitude );
						$( '#form1 input[name=postcode]' ).val( row.postcode );
						$( '#form1 input[name=country]' ).val( row.country );
						$( '#form1 input[name=city]' ).val( row.city );
						$( '#form1 input[name=company_website]' ).val( row.company_website );
						$( '#form1 input[name=sticker]' ).val( row.sticker );
						$( '#form1 input[name=note]' ).val( row.note );
						if ( !empty( row.pricing_system ) ) {
							$( '#form1 #pricing_system' ).val( row.pricing_system );
						}
					}
				} else {
					Error( d );
				}
			}
		} );

	} );

	$( document ).on( 'submit', '#form1', function( e ) {
		e.preventDefault();
		loading( 'add_user' );
		$( '#form1' ).ajaxSubmit( {
			success: function( data ) {
				unloading( 'add_user' );
				if ( data.substr( 0, 2 ) == 'OK' ) {
					$( '#add_user' ).modal( 'hide' );
					let id = $( "#form1 input[name=id]" ).val();
					if ( empty( id ) ) {
						id = data.substr( 3 );
						if ( !empty( id ) ) {
							append_data( id );
						} else {
							load_data();
						}
						Success( 'User saved successfully.' );
					} else {
						Success( 'Updated successfully.' );
						load_rows( id );
					}
				} else {
					Error( data );
				}
			},
		} );
	} );

	// search shop data
	$( document ).on( 'keypress', '#filter_search', function( e ) {
		if ( e.which == 13 ) {
			Page = 1;
			$( '#page' ).val( '1' );
			$( '#type' ).val( '' );
			$( '#order' ).val( 'DESC' );
			Block();
			$.ajax( {
				method: 'post',
				url: DOMAIN_URL + 'staff/load_data',
				data: $( '.form-filter' ).serialize(),
				success: function( data ) {
					UnBlock();
					Rows = data;
					make_html();
					$( "#temp_row" ).remove();
				}
			} );
		}
	} );

	// Delete shop data
	$( document ).on( 'click', '.delete', function( e ) {
		e.preventDefault();
		if ( !confirm( 'Are you sure you want to delete this record...?' ) ) {
			return false;
		}
		let id = $( this ).attr( 'data-id' );
		loading( 'row_id_' + id );
		$.ajax( {
			url: DOMAIN_URL + 'staff/delete',
			method: 'post',
			data: { id: id },
			success: function( d ) {
				unloading( 'row_id_' + id );
				if ( d == 'OK' ) {
					$( '#row_id_' + id ).remove();
				} else {
					Error( d );
				}
			}
		} );
	} );

	// Reset search
	$( document ).on( 'click', '.reset_search', function( e ) {
		e.preventDefault();
		Page = 1;
		$( '#page' ).val( '1' );
		$( '#type' ).val( '' );
		$( '#order' ).val( 'DESC' );
		$( '#filter_search' ).val( '' );
		$( '#tbody' ).unmark( markjs_options );
		load_data();
	} );

	// Send email when user not login
	$( document ).on( 'click', '.send_email', function( e ) {
		e.preventDefault();
		let id = $( this ).attr( 'data-id' );
		let email = $( this ).attr( 'data-email' );
		$( '#form2 input[name=id]' ).val( id );
		$( '#form2 input[name=email]' ).val( email );
		$( '#sendEmail' ).modal( 'show' );
	} );
	$( document ).on( 'submit', '#form2', function( e ) {
		e.preventDefault();
		loading( 'sendEmail' );
		$( '#form2' ).ajaxSubmit( {
			success: function( data ) {
				unloading( 'sendEmail' );
				if ( data == 'OK' ) {
					$( '#sendEmail' ).modal( 'hide' );
					Success( 'Email send successfully.' );
				} else {
					Error( data );
				}
			},
		} );
	} );

	//alert("Your screen resolution is: " + screen.width + "x" + screen.height);

	//alert("Your screen resolution is: " + window.screen.width * window.devicePixelRatio + "x" + window.screen.height * window.devicePixelRatio);

	window.addEventListener( "wheel", function( e ) {
		if ( Page >= Rows.pages ) {
			return false;
		}
		let windowHeight = $( window ).height();
		let windowScrooll = $( window ).scrollTop();
		let documentHeight = $( document ).height();
		//console.log( windowScrooll );
		if ( Page < Rows.pages && !is_loading && windowHeight + windowScrooll >= documentHeight - 400 ) { //if user scrolled to bottom of the page
			Page++;
			is_loading = true;
			$( '#page' ).val( Page );

			if ( Page > 1 ) {
				$( "#tbody" ).append( "<tr id='temp_row'><td class='center' colspan='5'><i class='fa fa-spin fa-spinner'></i> Loading ....</td></tr>" );
			}

			load_data();
		}
	} );

	// window scroll pagenation
	$( document ).on( 'scroll', function() {
		if ( Page >= Rows.pages ) {
			return false;
		}
		let windowHeight = $( window ).height();
		let windowScrooll = $( window ).scrollTop();
		let documentHeight = $( document ).height();
		if ( Page < Rows.pages && !is_loading && windowHeight + windowScrooll >= documentHeight - 400 ) { //if user scrolled to bottom of the page
			Page++;
			is_loading = true;
			$( '#page' ).val( Page );
			if ( Page > 1 ) {
				$( "#tbody" ).append( "<tr id='temp_row'><td class='center' colspan='5'><i class='fa fa-spin fa-spinner'></i> Loading ....</td></tr>" );
			}
			load_data();
		}
	} );

	// User status change
	$( document ).on( 'click', '.status', function( e ) {
		e.preventDefault();
		let id = $( this ).attr( 'data-id' );
		let is_active = $( this ).attr( 'data-is_active' );
		loading( 'row_id_' + id );
		$.ajax( {
			url: DOMAIN_URL + 'staff/status',
			method: 'post',
			data: { id: id, is_active: is_active },
			success: function( data ) {
				if ( data == 'OK' ) {
					Success( 'User status changed.' );
					unloading( 'row_id_' + id );
					load_rows( id );
				} else {
					Error( data );
				}
			}
		} );
	} );

	// select client
	$( document ).on( 'change', '.change_type', function() {
		let val = this.value;
		$( '#client_div' ).hide();
		$( '.phone_field' ).hide();

		$( '#userinfo' ).attr( 'type', 'email' );
		$( '#userinfo' ).attr( {
			title: 'Email field is required',
			placeholder: 'Email field is required',
		} );
		if ( isset( val ) && val == 'client' ) {
			$( '#client_div' ).show();
			$( '.phone_field' ).show();
		} else if ( isset( val ) && val == 'fitter' ) {
			$( '.phone_field' ).hide();
			$( '#userinfo' ).attr( 'type', 'text' );
			$( '#userinfo' ).attr( {
				title: 'Username field is required',
				placeholder: 'Username field is required',
			} );
		}
	} );

	$( document ).on( 'change', '#job_type', function( e ) {
		e.preventDefault();
		let id = $( this ).val();
		let price_a = $( this ).find( ':selected' ).attr( 'data-price_a' );
		let price_b = $( this ).find( ':selected' ).attr( 'data-price_b' );
		//
		let option = '<option value="">Select Price</option>';
		if ( isset( price_a ) ) {
			option += "<option value='" + 'PriceA,' + price_a + "'>" + 'PriceA (' + price_a + '&pound;)' + "</option>";
		}
		if ( isset( price_b ) ) {
			option += "<option value='" + 'PriceB,' + price_b + "'>" + 'PriceB (' + price_b + '&pound;)' + "</option>";
		}
		$( '#pricing_system' ).html( option );
	} );

	// trigger model
	$( document ).on( 'shown.bs.modal , hide.bs.modal', '#add_user', function() {
		initial();
		google.maps.event.trigger( map, "resize" );
		map.setCenter( mylocation );
	} );

} );

function load_data() {
	if ( Page == 1 ) {
		Block();
	}
	$.ajax( {
		url: DOMAIN_URL + 'staff/load_data',
		method: 'post',
		data: $( '.form-filter' ).serialize(),
		success: function( data ) {
			UnBlock();
			Rows = data;
			make_html();
			$( "#temp_row" ).remove();
		}
	} );
}

function make_html() {
	$( "#total_records" ).html( Rows.total_records );
	HTML = tmpl( 'load_data', Rows.rows );
	if ( Page > 1 ) {
		$( "#tbody" ).append( HTML );
	} else {
		$( "#tbody" ).html( HTML );
	}
	is_loading = false;
	if ( !empty( $( '#filter_search' ).val() ) ) {
		$( '#tbody' ).mark( $( '#filter_search' ).val(), markjs_options );
	}
	UnBlock();
}

//status_btn = '<button class="btn btn-xs green-meadow tooltips status" data-id="'+o[x].id+'" data-is_active="0" title="Deactive user"><i class="fa fa-check"></i></button>';

function load_rows( id = '' ) {
	if ( empty( id ) ) {
		return false;
	}
	loading( 'row_id_' + id );
	$.ajax( {
		url: DOMAIN_URL + 'staff/load_data',
		method: 'post',
		data: { id: id },
		success: function( data ) {
			unloading( 'row_id_' + id );
			$( '#row_id_' + id ).html( tmpl( 'load_row', data.rows ) );
		}
	} );
}

function append_data( id = '' ) {
	if ( empty( id ) ) {
		return false;
	}
	Block();
	$.ajax( {
		url: DOMAIN_URL + 'staff/load_data',
		method: 'post',
		data: { id: id },
		success: function( data ) {
			UnBlock();
			$( '#tbody' ).prepend( '<tr id="row_id_' + id + '">' + tmpl( 'load_row', data.rows ) + '</tr>' );
		}
	} );
}

function load_jobtype() {
	return false;
	// $.ajax( {
	// 	url: DOMAIN_URL + 'jobtype/load_data',
	// 	method: 'post',
	// 	data: { pagesize: 999999 },
	// 	success: function( data ) {
	// 		if ( !empty( data.rows ) ) {
	// 			let option = '<option value="">==Select Job Type==</option>';
	// 			$( '#job_type' ).select2( 'destroy' );
	// 			$.each( data.rows, function( i, v ) {
	// 				option += "<option value='" + v.id + "' data-price_a='" + v.price_a + "' data-price_b='" + v.price_b + "'>" + (i + 1) + ') ' + v.name + "</option>";
	// 			} );
	// 			$( '#job_type' ).html( option );
	// 			$( '#job_type' ).select2();
	// 		}
	// 	}
	// } );
}

// **************************************
// **************************************
// **************************************
// **************************************
// **************************************
// **************************************

function initial( lat = 55.953252, lng = -3.188266999999996 ) {
	$( '#latitude' ).val( lat );
	$( '#longitude' ).val( lng );
	mylocation = new google.maps.LatLng( lat, lng );
	map = new google.maps.Map( document.getElementById( 'map' ), {
		zoom: 13,
		mapTypeId: google.maps.MapTypeId.ROADMAP,
		center: { lat: lat, lng: lng },
	} );
	marker = new google.maps.Marker( {
		position: mylocation,
		map: map,
		draggable: true
	} );
	google.maps.event.addListener(
		marker,
		'drag',
		function() {
			let latlng = marker.position.lat() + ',' + marker.position.lng();
			$.ajax( {
				url: 'https://maps.googleapis.com/maps/api/geocode/json?latlng=' + latlng + '&key=AIzaSyALtf8vQux4gEiDEeoG0nkZROKYOsvSwmk',
				success: function( data ) {
					$( '#autocomplete' ).val( data.results[ 0 ].formatted_address );
					// $( '#country option[value="' + country + '"]' ).attr( 'selected', 'selected' );
					$( '#locality' ).val( data.results[ 0 ].address_components[ 3 ].short_name );
					for ( var i = 0; i < data.results[ 0 ].address_components.length; i++ ) {
						var addressType = data.results[ 0 ].address_components[ i ].types[ 0 ];
						if ( componentForm[ addressType ] ) {
							var val = data.results[ 0 ].address_components[ i ][ componentForm[ addressType ] ];
							document.getElementById( addressType ).value = val;
						}
					}

				}
			} );
		}
	);
}

function initAutocomplete() {
	// Create the autocomplete object, restricting the search to geographical
	// location types.
	var input = document.getElementById( 'autocomplete' );
	var options = {
		types: ['geocode'],
		componentRestrictions: { country: 'uk' }
	};

	autocomplete = new google.maps.places.Autocomplete( input, options );

	// When the user selects an address from the dropdown, populate the address
	// fields in the form.
	autocomplete.addListener( 'place_changed', fillInAddress );
}

function fillInAddress() {
	// Get the place details from the autocomplete object.
	loading( 'add_user' )
	var place = autocomplete.getPlace();
	var geocoder = new google.maps.Geocoder();
	geocoder.geocode( { 'address': place.formatted_address }, function( results, status ) {
		if ( status == 'OK' ) {
			let location = results[ 0 ].geometry.location;
			let loc = location.toString();
			loc = explode( ',', loc );
			let lat = trim( str_replace( '(', '', loc[ 0 ] ) );
			let lng = trim( str_replace( ')', '', loc[ 1 ] ) );
			let latlng = lat + ',' + lng;
			$.ajax( {
				url: 'https://maps.googleapis.com/maps/api/geocode/json?latlng=' + latlng + '&key=AIzaSyALtf8vQux4gEiDEeoG0nkZROKYOsvSwmk',
				success: function( data ) {
					unloading( 'add_user' );
					//$( '#autocomplete' ).val( data.results[ 0 ].formatted_address );
					$( '#locality' ).val( data.results[ 0 ].address_components[ 3 ].short_name );
					for ( var i = 0; i < data.results[ 0 ].address_components.length; i++ ) {
						var addressType = data.results[ 0 ].address_components[ i ].types[ 0 ];
						if ( componentForm[ addressType ] ) {
							var val = data.results[ 0 ].address_components[ i ][ componentForm[ addressType ] ];
							document.getElementById( addressType ).value = val;
						}
					}
				}
			} );
		} else {
			Error( 'Geocode was not successful for the following reason: ' + status );
		}
	} );

	return false;
}

// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
	if ( navigator.geolocation ) {
		navigator.geolocation.getCurrentPosition( function( position ) {
			var geolocation = {
				lat: position.coords.latitude,
				lng: position.coords.longitude
			};
			var circle = new google.maps.Circle( {
				center: geolocation,
				radius: position.coords.accuracy
			} );
			autocomplete.setBounds( circle.getBounds() );
		} );
	}
}