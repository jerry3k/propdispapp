// This file is generated by Nasir Scripts
var Page = 1;
var Rows = '';
var is_loading = true;
var placeSearch, autocomplete, map, marker, infoWindow, mylocation;
var componentForm = {
	street_number: 'short_name',
	route: 'long_name',
	locality: 'long_name',
	administrative_area_level_1: 'short_name',
	country: 'long_name',
	postal_code: 'short_name'
};

// horizental scroll data
const slider = document.querySelector( '.scroll_div' );
let isDown = false;
let startX;
let scrollLeft;
slider.addEventListener( 'mousedown', ( e ) => {
	isDown = true;
	slider.classList.add( 'active' );
	startX = e.pageX - slider.offsetLeft;
	scrollLeft = slider.scrollLeft;
} );
slider.addEventListener( 'mouseleave', () => {
	isDown = false;
	slider.classList.remove( 'active' );
} );
slider.addEventListener( 'mouseup', () => {
	isDown = false;
	slider.classList.remove( 'active' );
} );
slider.addEventListener( 'mousemove', ( e ) => {
	if ( !isDown ) {
		return;
	}
	e.preventDefault();
	const x = e.pageX - slider.offsetLeft;
	const walk = (x - startX) * 3; //scroll-fast
	slider.scrollLeft = scrollLeft - walk;
} );

$( window ).on( 'load', function() {
	$( 'span.input-group-addon' ).html( '<i class="fa fa-calendar font-blue-soft"></i>' );
} );

function calicon() {
	$( 'span.input-group-addon' ).html( '<i class="fa fa-calendar font-blue-soft"></i>' );
}

function getMonthDateRange( year, month ) {
	// month in moment is 0 based, so 9 is actually october, subtract 1 to compensate
	// array is 'year', 'month', 'day', etc
	var startDate = moment( [year, month] );
	// Clone the value before .endOf()
	var endDate = moment( startDate ).endOf( 'month' );
	let start = startDate.toDate();
	let end = endDate.toDate();
	start = moment( start ).format( 'LLL' );
	end = moment( end ).format( 'LLL' );
	$( '#time_to' ).val( end );
	$( '#time_from' ).val( start );
	Page = 1;
	$( "#page" ).val( Page );
	load_data();
}

$( function() {
	load_data();
	load_users();
	get_postcode();
	load_jobtype( '#changejobtype' );

	// date range method
	var start = moment().subtract( 29, 'days' );
	var end = moment().endOf( 'month' );
	$( '#reportrange span' ).html( '' );
	$( '#reportrange' ).daterangepicker( {
		opens: (Metronic.isRTL() ? 'left' : 'right'),
		startDate: start,
		endDate: end,
		minDate: '01/01/2016',
		maxDate: date( "m/t/Y" ),
		dateLimit: {
			days: 9999
		},
		showDropdowns: true,
		showWeekNumbers: true,
		timePicker: false,
		timePickerIncrement: 1,
		timePicker12Hour: true,
		applyClass: 'green',
		format: 'DD-MM-YYYY',
		separator: ' to ',
		locale: {
			applyLabel: 'Search',
			fromLabel: 'From',
			toLabel: 'To',
			customRangeLabel: 'Custom Range',
			daysOfWeek: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
			monthNames: [
				'January',
				'February',
				'March',
				'April',
				'May',
				'June',
				'July',
				'August',
				'September',
				'October',
				'November',
				'December'
			],
			firstDay: 1
		},
		ranges: {
			'Today': [moment(), moment()],
			'Yesterday': [moment().subtract( 1, 'days' ), moment().subtract( 1, 'days' )],
			'Last 7 Days': [moment().subtract( 6, 'days' ), moment()],
			'Last 30 Days': [moment().subtract( 29, 'days' ), moment()],
			'This Month': [moment().startOf( 'month' ), moment().endOf( 'month' )],
			'Last Month': [
				moment().subtract( 1, 'month' ).startOf( 'month' ),
				moment().subtract( 1, 'month' ).endOf( 'month' )
			]
		},
	}, function( start, end ) {
		$( '#reportrange span' ).html( '' );
	} );
	$( '#reportrange' ).on( 'apply.daterangepicker', function( ev, picker ) {
		Page = 1;
		calicon();
		// let toDate = picker.endDate;
		// let fromtDate = picker.startDate;
		let toDate = $( 'input[name="daterangepicker_end"]' ).val();
		let fromtDate = $( 'input[name="daterangepicker_start"]' ).val();
		$( '#time_to' ).val( toDate );
		$( '#time_from' ).val( fromtDate );
		let range = get_calender_date( fromtDate, 'M d,Y' ) + ' - ' + get_calender_date( toDate, 'M d,Y' );
		$( '#show_daterange' ).val( range );
		$( '#page' ).val( Page );
		//load_data();
	} );

	// trigger model
	$( document ).on( 'shown.bs.modal , hide.bs.modal', '#add_job', function() {
		initial();
		google.maps.event.trigger( map, 'resize' );
		map.setCenter( mylocation );
	} );

	// window scroll pagination on mouse wheel up and down
	window.addEventListener( "wheel", function( e ) {
		if ( Page >= Rows.pages ) {
			return false;
		}
		let windowHeight = $( window ).height();
		let windowScrooll = $( window ).scrollTop();
		let documentHeight = $( document ).height();
		if ( Page < Rows.pages && !is_loading && windowHeight + windowScrooll >= documentHeight - 400 ) { //if user scrolled to bottom of the page
			Page++;
			is_loading = true;
			$( '#page' ).val( Page );

			if ( Page > 1 ) {
				$( "#tbody" ).append( "<tr id='temp_row'><td class='center' colspan='8'><i class='fa fa-spin fa-spinner'></i> Loading ....</td></tr>" );
			}
			load_data();
		}
	} );

	// window scroll pagination on mouse wheel up and down
	$( document ).on( 'scroll', function() {
		if ( Page >= Rows.pages ) {
			return false;
		}
		if ( Page < Rows.pages && !is_loading && $( window ).scrollTop() + $( window ).height() >= $( document ).height() - 400 ) { //if user scrolled to bottom of the page
			Page++;
			is_loading = true;
			$( '#page' ).val( Page );
			if ( Page > 1 ) {
				$( "#tbody" ).append( "<tr id='temp_row'><td class='center' colspan='8'><i class='fa fa-spin fa-spinner'></i> Loading ....</td></tr>" );
			}
			load_data();
		}
	} );

	$( document ).on( 'click', '#checkespc', function() {
		$( '#espc' ).val( '' );
		if ( $( this ).prop( "checked" ) == true ) {
			$( '#espc' ).val( 'true' );
		}
	} );
	$( document ).on( 'click', '#checkquestionmark', function() {
		$( '#questionmark' ).val( '' );
		if ( $( this ).prop( "checked" ) == true ) {
			$( '#questionmark' ).val( '?' );
		}
	} );

	// Reset search
	$( document ).on( 'click', '.reset_search', function( e ) {
		e.preventDefault();
		$( '.form-filter' ).val( '' );
		$( '#show_daterange' ).val( '' );
		$( '#tbody' ).unmark( markjs_options );

		setTimeout( function() {
			Page = 1;
			$( '#page' ).val( '1' );
			$( '#pagesize' ).val( '10' );
			$( '#orderby' ).val( 'id' );
			$( '#order' ).val( 'DESC' );

			$( '#espc' ).val( '' );
			$( '#questionmark' ).val( '' );
			$( '#checkespc' ).attr( 'checked', false ).uniform();
			$( '#checkquestionmark' ).attr( 'checked', false ).uniform();

			$( '#changefitter' ).select2( 'val', '' );
			$( '#changejobtype' ).select2( 'val', '' );
			$( '#changeclientid' ).select2( 'val', '' );
			$( '#changepostcode' ).select2( 'val', '' );
			$( '#changejobstatus' ).select2( 'val', '' );
			$( '#changeoverplate' ).select2( 'val', '' );
			$( '#changeloasttype' ).select2( 'val', '' );
			$( '#change_contact_type' ).select2( 'val', '' );

			load_data();
		}, 100 );

	} );

	// ***************** Add Job Data *****************
	$( document ).on( 'click', '.add_job', function( e ) {
		e.preventDefault();
		$( '#map' ).html( '' );
		$( '.row-border' ).remove();
		$( '.load_subjob' ).html( '' );
		$( '.get-sub-jobs' ).html( '' );
		$( '#add_job' ).modal( 'show' );
		// empty form value
		$( "#form1 input[name=id]" ).val( '0' );
		// Reset form button
		$( '#form1 #btn_reset' ).trigger( 'click' );
		$( '#form1 #client_id' ).val( '' ).attr( {
			"readonly": false,
			"style": "pointer-events: block",
		} );
		if ( $( '.lmsg' ).length === 0 ) {
			let h = '<h2 class="lmsg center">Click the "Add Job" button to add more jobs to the property.\n' +
			        'create.</h2>';
			$( '.load_subjob' ).prepend( h );
		}
		load_clients( 'client' );
	} );

	// ***************** Edit Job Data *****************
	$( document ).on( 'click', '.edit_job', function( e ) {
		e.preventDefault();
		let id = $( this ).attr( 'data-id' );
		let jobid = $( this ).attr( 'data-jobid' );
		Block();
		$.ajax( {
			url: DOMAIN_URL + 'jobs/get_jobs',
			method: 'post',
			data: { jobid: jobid },
			success: function( res ) {
				UnBlock();
				let rows = res.rows;
				$( '#add_job' ).modal( 'show' );
				$( '.get-sub-jobs' ).html( '' );
				let html = tmpl( 'load_jobs_tab_data', rows );
				setTimeout( function() {
					// Address field data
					if ( !empty( rows[ 0 ].address1 ) ) {
						setTimeout( function() {
							codeAddress();
							$( '#autocomplete' ).focus();
							$( '#form1 #autocomplete' ).val( rows[ 0 ].address1 );
							$( '#form1 #locality' ).val( rows[ 0 ].city );
							$( '#form1 #postal_code' ).val( rows[ 0 ].postcode );
							$( '#form1 #street_number' ).val( rows[ 0 ].address2 );
							$( '#form1 #route' ).val( rows[ 0 ].address3 );
						}, 300 );
					}
					$( '.get-sub-jobs' ).html( html );
				}, 50 );
			}
		} );
	} );

	// Submit form
	$( document ).on( 'submit', '#form1', function( e ) {
		e.preventDefault();
		loading( 'add_job' );
		$( '#form1' ).ajaxSubmit( {
			success: function( data ) {
				unloading( 'add_job' );
				if ( data.substr( 0, 2 ) == 'OK' ) {
					load_data();
					$( '#map' ).html( '' );
					$( '.load_subjob' ).html( '' );
					$( '.get-sub-jobs' ).html( '' );
					$( '#add_job' ).modal( 'hide' );
					let numRows = $( '.row-border' ).length;
					if ( empty( numRows ) ) {
						$( '.lmsg' ).show();
					} else {
						$( '.lmsg' ).hide();
					}
					Success( 'Job saved successfully.' );
				} else {
					Error( data );
				}
			},
		} );
	} );

	// Question mark field check
	$( document ).on( 'keypress', '.questionmark', function( e ) {
		var charCode = (e.which) ? e.which : e.keyCode;
		if ( charCode != 63 ) {
			Error( 'This field only question mark ("?") symbol allowed. ' );
			return false;
		}
	} );

	// delete sub job row
	$( document ).on( 'click', '.del_subjob', function( e ) {
		e.preventDefault();
		let id = $( this ).attr( 'data-id' );
		$( '.jobrow_' + id ).remove();
		let numRows = $( '.row-border' ).length;
		if ( empty( numRows ) ) {
			$( '.lmsg' ).show();
		}
	} );

	// add sub job with div data
	$( document ).on( 'click', '.add_subjob', function( e ) {
		e.preventDefault();
		$( '.lmsg' ).hide();
		let uid = uniqueID( 5 );
		let today = new Date();
		let current_date = today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();
		load_jobtype( '#job_type_' + uid );

		let html = '<div class="row row-border jobrow_' + uid + '">' +
		           '<div class="hidden">' +
		           '<input name="eid[' + uid + ']" value="0">' +
		           '<input name="total[' + uid + ']" id="total_' + uid + '" value="0">' +
		           '<input name="rowid[]" value="' + uid + '">' +
		           '</div>' +
		           '<div class="col-md-12">' +
		           '<a class="btn btn-sm del_subjob red pull-right" data-id="' + uid + '"' +
		           'title="Delete Job"><i class="fa fa-times"></i></a>' +
		           '</div>' +
		           '<div class="col-md-6">' +
		           '<div class="job-box">' +
		           '<div class="col-md-4">' +
		           '<label class="tl-color">Job Type <span class="rfield">*</span></label>' +
		           '<select class="form-control change_jobtype" data-id="' + uid + '"' +
		           'name="job_type[' + uid + ']" id="job_type_' + uid + '"' +
		           'required="required">' +
		           '</select>' +
		           '</div>' +
		           '<div class="cjt-field_' + uid + '"></div>' +
		           '<div class="col-md-12 clearfix margin-tb-20 line-sperator"></div>' +

		           // '<div class="col-md-4">' +
		           // '<div class="form-group form-md-line-input has-success">' +
		           // '<input type="text" name="enter_date[' + uid + ']"' +
		           // 'class="form-control edited input-sm readonly"' +
		           // 'value="' + my_date( current_date ) + '"' +
		           // 'placeholder="Date Entered"' +
		           // 'required="required" readonly="readonly">' +
		           // '<label>Date Entered<span class="rfield">*</span></label>' +
		           // '</div>' +
		           // '</div>' +

		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input has-success">' +
		           '<input type="text"' +
		           'class="form-control input-sm edited"' +
		           'name="poref[' + uid + ']"' +
		           'placeholder="PO/Ref Number">' +
		           '<label>PO/Ref Number</label>' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input has-success">' +
		           '<input type="text" name="access[' + uid + ']"' +
		           'class="form-control input-sm edited"' +
		           'placeholder="Access"' +
		           '>' +
		           '<label>Access</label>' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input has-success">' +
		           '<input type="text" name="keys_text[' + uid + ']"' +
		           'class="form-control input-sm edited"' +
		           'placeholder="Keys">' +
		           '<label>Keys</label>' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input has-success">' +
		           '<input type="text" name="appointment[' + uid + ']"' +
		           'placeholder="Appointment"' +
		           'class="form-control input-sm edited"' +
		           '>' +
		           '<label>Appointment</label>' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input has-success">' +
		           '<input type="text" name="board[' + uid + ']"' +
		           '       placeholder="No Board"' +
		           '       class="form-control input-sm edited"' +
		           '>' +
		           '<label>No Board</label>' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-12">' +
		           '<div class="form-group form-md-line-input pt0 has-success">' +
		           '<textarea class="form-control"' +
		           '          name="comments[' + uid + ']" rows="4"' +
		           '          placeholder="Your Comments..."></textarea>' +
		           '</div>' +
		           '</div>' +
		           '</div>' +
		           '</div>' +
		           // **************************
		           // **************************
		           // **************************
		           // left side box
		           // **************************
		           // **************************
		           // **************************
		           '<div class="col-md-6">' +
		           '<div class="job-box">' +
		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input has-success">' +
		           '<input class="form-control date-picker input-sm editable"' +
		           'type="text" name="date_to_be_done[' + uid + ']"' +
		           'data-date-format="dd-mm-yyyy"' +
		           'value="' + my_datetime_formate( current_date, 'd-m-Y' ) + '"' +
		           'placeholder="DateToBeDone">' +
		           '<label>DateToBeDone <span class="rfield">*</span></label>' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-4">' +
		           '<label class="tl-color">Contact <span class="rfield">*</span></label>' +
		           '<select class="form-control"' +
		           '        name="contact_type[' + uid + ']">' +
		           '<option value="email">Email</option>' +
		           '<option value="phone">Phone</option>' +
		           '</select>' +
		           '</div>' +
		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input has-success">' +
		           '<input class="form-control input-sm edited" type="text"' +
		           '       name="client_contact[' + uid + ']"' +
		           '       placeholder="Client Contact Name/Notes">' +
		           '<label>CC Name/Notes</label>' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-12 clearfix margin-tb-20 line-sperator"></div>' +
		           '<div class="col-md-12"><br></div>' +
		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input has-success pt0">' +
		           '<label>' +
		           '<input type="checkbox"' +
		           'name="espc[' + uid + ']" value="true" checked>ESPC Placard' +
		           '</label>' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input has-success pt0">' +
		           '<label>' +
		           '<input type="checkbox"' +
		           'name="charge[' + uid + ']" value="true" checked>Charge' +
		           '</label>' +
		           '<label>' +
		           '<input type="checkbox"' +
		           'name="pay[' + uid + ']" value="true" checked>Pay' +
		           '</label>' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input pt0 has-success" style="margin-bottom: 0px !important;top: -15px">' +
		           '<input type="text" name="questionmark[' + uid + ']"' +
		           'class="form-control input-sm questionmark" placeholder="?">' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-12"><br></div>' +
		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input has-success pt0">' +
		           '<label>Job Status</label>' +
		           '<div class="jobstatus-btn">' +
		           '<label>' +
		           '<input type="radio"' +
		           'data-id="' + uid + '"' +
		           'name="job_status[' + uid + ']" value="0"' +
		           'class="change_job_status"' +
		           'checked>Pending</label>' +
		           '<label>' +
		           '<input type="radio"' +
		           'data-id="' + uid + '"' +
		           'name="job_status[' + uid + ']" value="1"' +
		           'class="change_job_status"' +
		           '>Done</label>' +
		           '<div class="js-date_' + uid + '" style="display: none;">' +
		           '<input class="form-control form-control-inline date-picker input-sm"' +
		           'size="16" name="date_done[' + uid + ']" id="date_done_' + uid + '"' +
		           'type="text" value=""' +
		           'data-date-format="dd-mm-yyyy"' +
		           'required="required"' +
		           'placeholder="Select Date">' +
		           '</div>' +
		           '</div>' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input has-success pt0">' +
		           '<label>Deliver Own Over plate</label>' +
		           '<div class="deliver-plate">' +
		           '<label>' +
		           '<input type="radio" name="overplate[' + uid + ']"' +
		           'value="blank" checked>' +
		           'Blank' +
		           '</label>' +
		           '<label>' +
		           '<input type="radio"' +
		           'name="overplate[' + uid + ']"' +
		           'value="yes">' +
		           'Yes' +
		           '</label>' +
		           '<label>' +
		           '<input type="radio"' +
		           'name="overplate[' + uid + ']"' +
		           'value="delivered">Delivered' +
		           '</label>' +
		           '</div></div>' +
		           '</div>' +
		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input has-success pt0">' +
		           '<label>' +
		           '<input type="checkbox" class="change_pro_status" data-id="' + uid + '"' +
		           'name="lost_property[' + uid + ']" value="true">Lost Property' +
		           '</label>' +
		           '<div class="lost-job lost_pro_option_' + uid + '">' +
		           '</div>' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-12">' +
		           '<div class="form-group form-md-line-input pt0 has-success">' +
		           '<textarea class="form-control"' +
		           'name="internal_comments[' + uid + ']" rows="4"' +
		           'placeholder="Problems/ Internal comments"></textarea>' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-12 clearfix margin-tb-20 line-sperator"></div>' +
		           '<div class="col-md-4">' +
		           '<span class="tl-color">Price :</span>' +
		           '<p class="job-total-price_' + uid + '">&pound;0</p>' +
		           '</div>' +
		           '<div class="col-md-4">' +
		           '<span class="tl-color">Adjustment : </span>' +
		           '<p class="job-expense-price_' + uid + '">&pound;0</p>' +
		           '</div>' +
		           '<div class="col-md-4">' +
		           '<span class="tl-color">Total : </span>' +
		           '<p class="all-total-price_' + uid + '">&pound;0</p>' +
		           '</div>' +
		           '</div>' +
		           '</div>' +
		           '</div>';
		$( '.load_subjob' ).prepend( html );
	} );

	// change lost property option
	$( document ).on( 'change', '.change_pro_status', function() {
		let html = '';
		let val = this.value;
		let id = $( this ).attr( 'data-id' );
		$( '.lost_pro_option_' + id ).html( html );
		if ( this.checked ) {
			html += '<label><input type="radio" name="lost[' + id + ']" value="pole" required="required">Pole</label>' +
			        '<label><input type="radio" name="lost[' + id + ']" value="board">Board</label>' +
			        '<label><input type="radio" name="lost[' + id + ']" value="both">Both</label>';
			$( '.lost_pro_option_' + id ).html( html );
		}
	} );

	// add job type on change method
	$( document ).on( 'change', '.change_jobtype', function( e ) {
		e.preventDefault();
		let id = this.value;
		let parent_id = $( this ).attr( 'data-id' ); // uid for job type
		if ( empty( id ) ) {
			Error( 'Please select job type.' );
			return false;
		}
		// ********** Check if client name is selected or not ********** \\
		let client_id = $( '#client_id option:selected' ).val();
		if ( empty( client_id ) ) {
			Error( 'Please select a client name.' );
			$( '#job_type_' + parent_id ).val( '' );
			$( '.ptab' ).trigger( 'click' );
			return false;
		}
		// **************** Get job type data ****************
		Block();
		$.ajax( {
			url: DOMAIN_URL + 'jobs/get_jobtype_price',
			method: 'post',
			data: {
				client_id: client_id,
				type_id: id
			},
			success: function( result ) {
				UnBlock();
				let price = 0;
				let expense = 0;
				let row = '';
				if ( empty( result.rows ) ) {
					Error( 'No record found against this job!' );
					return false;
				}
				row = result.rows;
				if ( !empty( result.price ) ) {
					price = result.price;
				}
				if ( !empty( result.expense ) ) {
					expense = result.expense;
				}
				let html = '';
				let uid = uniqueID( 5 );
				let today = new Date();
				let current_date = today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();
				setTimeout( function() {
					total_jobs_price( parent_id );
					load_fitter_users( '#fitter_id_' + uid );
				}, 100 );
				html += '<div class="col-md-2 hidden">' +
				        '<input name="discount[' + parent_id + ']" value="' + row.discount + '">' +
				        '</div>';
				html += '<div class="col-md-4">' +
				        '<label class="tl-color">Select Fitter <span class="rfield">*</span></label>' +
				        '<select name="fitter_id[' + parent_id + ']" id="fitter_id_' + uid + '" class="form-control" required="required">' +
				        '</select>' +
				        '</div>';
				html += '<div class="col-md-4">' +
				        '<div class="form-group form-md-line-input has-success">' +
				        '<input type="text" name="job_date[' + parent_id + ']"' +
				        'class="form-control edited input-sm date-picker"' +
				        'value="' + my_date( current_date ) + '"' +
				        'placeholder="Select Date">' +
				        '<label>Date Enter<span class="rfield">*</span></label>' +
				        '</div>' +
				        '</div>';
				if ( !empty( row.print_name ) && row.print_name != 'N' ) {
					html += '<div class="col-md-4">' +
					        '<div class="form-group form-md-line-input has-success">' +
					        '<input type="text" name="print_name[' + parent_id + ']"' +
					        'class="form-control edited input-sm"' +
					        'placeholder="Print Name" required="required">' +
					        '<label>Print Name <span class="rfield">*</span></label>' +
					        '</div>' +
					        '</div>';
				}
				if ( !empty( row.position ) && row.position != 'N' ) {
					html += '<div class="col-md-4">' +
					        '<div class="form-group form-md-line-input has-success">' +
					        '<input type="text" name="position[' + parent_id + ']"' +
					        'class="form-control edited input-sm"' +
					        'placeholder="Position">' +
					        '<label>Position</label>' +
					        '</div>' +
					        '</div>';
				}
				html += '<div class="col-md-4">' +
				        '<div class="form-group form-md-line-input has-success">' +
				        '<input type="number" name="price[' + parent_id + ']"' +
				        'data-id="' + uid + '"' +
				        'data-parent_id="' + parent_id + '"' +
				        'value="' + price + '" ' +
				        'class="form-control edited input-sm change_price"' +
				        'placeholder="Price">' +
				        '<label>Price</label>' +
				        '</div>' +
				        '</div>';
				html += '<div class="col-md-4">' +
				        '<div class="form-group form-md-line-input has-success">' +
				        '<input type="number" name="qty[' + parent_id + ']"' +
				        'data-id="' + uid + '"' +
				        'data-parent_id="' + parent_id + '"' +
				        'class="form-control edited input-sm change_qty"' +
				        'value="1"' +
				        'placeholder="Qty">' +
				        '<label>Qty</label>' +
				        '</div>' +
				        '</div>';
				html += '<div class="col-md-4">' +
				        '<div class="form-group form-md-line-input has-success">' +
				        '<input type="number" ' +
				        'name="expense[' + parent_id + ']"' +
				        'data-id="' + uid + '" value="' + expense + '"' +
				        'data-parent_id="' + parent_id + '"' +
				        'class="form-control edited input-sm change_expense"' +
				        'placeholder="Expense">' +
				        '<label>Adjustment</label>' +
				        '</div>' +
				        '</div>';
				$( '.change_price' ).blur();
				$( '.cjt-field_' + parent_id ).html( html );
			}
		} );
	} );

	// Change job status
	$( document ).on( 'click', '.change_job_status', function() {
		let val = this.value;
		let id = $( this ).attr( 'data-id' );
		$( '.js-date_' + id ).hide();
		$( '#date_done_' + id ).val( '' );
		if ( isset( val ) && val == 1 ) {
			$( '.js-date_' + id ).show();
		}
	} );

	// change job price
	$( document ).on( 'keyup , change , blur', '.change_price', function( e ) {
		e.preventDefault();
		let total = 0;
		let thiss = this;
		let price = thiss.value;
		let id = $( thiss ).attr( 'data-id' );
		let parent_id = $( thiss ).attr( 'data-parent_id' );
		let qty = parseFloat( $( 'input[name="qty[' + parent_id + ']"]' ).val() );
		let expense = parseFloat( $( 'input[name="expense[' + parent_id + ']"]' ).val() );
		let discount = parseFloat( $( 'input[name="discount[' + parent_id + ']"]' ).val() );
		if ( empty( qty ) || qty < 0 ) {
			qty = 1;
			$( thiss ).val( qty );
		}
		total = parseFloat( price ) + ((qty - 1) * parseFloat( price )) * (parseFloat( discount ) / 100);
		total = parseFloat( total ) + parseFloat( expense );
		//$( '.tr-price_' + parent_id ).html( '&pound;' + number_format( parseFloat( total ), 1 ) );
		$( '#total_' + parent_id ).val( number_format( parseFloat( total ), 1 ) );
		// Regenerate amount
		setTimeout( function() {
			total_jobs_price( parent_id );
		}, 100 );
	} );

	// change job qty effect on price
	$( document ).on( 'keyup , change , blur', '.change_qty', function( e ) {
		e.preventDefault();
		let total = 0;
		let thiss = this;
		let qty = thiss.value;
		let id = $( thiss ).attr( 'data-id' );
		let parent_id = $( thiss ).attr( 'data-parent_id' );

		let price = parseFloat( $( 'input[name="price[' + parent_id + ']"]' ).val() );
		let expense = parseFloat( $( 'input[name="expense[' + parent_id + ']"]' ).val() );
		let discount = parseFloat( $( 'input[name="discount[' + parent_id + ']"]' ).val() );

		if ( empty( qty ) || qty < 0 ) {
			qty = 1;
			$( thiss ).val( qty );
		}

		total = parseFloat( price ) + ((qty - 1) * parseFloat( price )) * (parseFloat( discount ) / 100);
		total = parseFloat( total ) + parseFloat( expense );
		//$( '.tr-price_' + parent_id ).html( '&pound;' + number_format( parseFloat( total ), 1 ) );
		$( '#total_' + parent_id ).val( number_format( parseFloat( total ), 1 ) );
		// Regenerate amount
		setTimeout( function() {
			total_jobs_price( parent_id );
		}, 100 );
	} );

	// change job expense effect on price
	$( document ).on( 'keyup , change , blur', '.change_expense', function( e ) {
		e.preventDefault();
		let total = 0;
		let thiss = this;
		let expense = thiss.value;
		let id = $( thiss ).attr( 'data-id' );
		let parent_id = $( thiss ).attr( 'data-parent_id' );
		let qty = parseFloat( $( 'input[name="qty[' + parent_id + ']"]' ).val() );
		let price = parseFloat( $( 'input[name="price[' + parent_id + ']"]' ).val() );
		let discount = parseFloat( $( 'input[name="discount[' + parent_id + ']"]' ).val() );
		if ( empty( qty ) || qty < 0 ) {
			qty = 1;
			$( thiss ).val( qty );
		}
		total = parseFloat( price ) + ((qty - 1) * parseFloat( price )) * (parseFloat( discount ) / 100);
		total = parseFloat( total ) + parseFloat( expense );
		//$( '.tr-price_' + parent_id ).html( '&pound;' + number_format( parseFloat( total ), 1 ) );
		$( '#total_' + parent_id ).val( number_format( parseFloat( total ), 1 ) );
		// Regenerate amount
		setTimeout( function() {
			total_jobs_price( parent_id );
		}, 100 );
	} );

	// delete job
	$( document ).on( 'click', '.deletejob', function( e ) {
		e.preventDefault();
		if ( !confirm( 'Are you sure you want to delete this job ...?' ) ) {
			return false;
		}
		let id = $( this ).attr( 'data-id' );
		let jobid = $( this ).attr( 'data-jobid' );
		Block();
		$.ajax( {
			url: DOMAIN_URL + 'jobs/delete_subjobs',
			method: 'post',
			data: { id: id, jobid: jobid },
			success: function( data ) {
				UnBlock();
				let res = data.substr( 0, 2 );
				if ( isset( res ) && res == 'OK' ) {
					$( '.rowid_' + data.substr( 3 ) ).remove();
					Success( 'Job Deleted Successfully.' )
				} else {
					Error( data );
				}
			}
		} );
	} );

	// search job data
	$( document ).on( 'keypress', '#filter_search', function( e ) {
		if ( e.which == 13 ) {
			Page = 1;
			$( '#page' ).val( '1' );
			$( '#order' ).val( 'DESC' );
			load_data();
		}
	} );

	// print job in fancy box
	$( document ).on( 'click', '.print_job', function( e ) {
		e.preventDefault();
		let id = $( this ).attr( 'data-id' );
		let jobid = $( this ).attr( 'data-jobid' );
		$.fancybox.open( {
			src: DOMAIN_URL + 'jobs/print_job/' + id + '/' + jobid,
			type: 'iframe', // Content type: image|inline|ajax|iframe|html (optional)
			opts: {
				afterShow: function( instance, current ) {
					// console.info( 'done!' );
				}
			}
		} );
	} );

	// update job status
	$( document ).on( 'click', '.update_job_status', function() {
		let status = 0;
		if ( this.checked ) {
			status = 1
		}
		let id = $( this ).attr( 'data-id' );
		let jobid = $( this ).attr( 'data-jobid' );
		let jobtype = $( this ).attr( 'data-jobtype' );
		let client_id = $( this ).attr( 'data-client_id' );
		if ( empty( jobtype ) || jobtype == null || jobtype == 'null' ) {
			Error( 'Please select a job type.' );
			return false;
		}
		Block();
		$.ajax( {
			url: DOMAIN_URL + 'jobs/update_job_status',
			method: 'post',
			data: {
				id: id,
				jobid: jobid,
				status: status,
				client_id: client_id
			},
			success: function( data ) {
				UnBlock();
				if ( !empty( data.id ) ) {
					Success( 'Job Status Updated.' );
					if ( isset( data.status ) && !empty( data.status ) ) {
						$( '.rowid_' + data.id ).addClass( 'jrc' );
					} else {
						$( '.rowid_' + data.id ).removeClass( 'jrc' );
					}
				} else {
					Error( data );
				}
			}
		} );
	} );

	// search filter
	$( document ).on( 'click', '.search_filter', function( e ) {
		e.preventDefault();
		Block();
		Page = 1;
		$( '#page' ).val( Page );
		$( '#pagesize' ).val( '999' );
		$( '#orderby' ).val( 'id' );
		$( '#order' ).val( 'DESC' );
		$( '#tbody' ).html( '' );
		setTimeout( function() {
			let form = $( '.form-filter' ).serialize();
			$.ajax( {
				url: DOMAIN_URL + 'jobs/get_jobs',
				method: 'post',
				data: form,
				success: function( data ) {
					UnBlock();
					Rows = data;
					make_html();
					$( "#temp_row" ).remove();
				}
			} );
		}, 100 );
	} );

	$( document ).on( 'click', '.print_sticker', function( e ) {
		e.preventDefault();
		if ( !is_admin ) {
			return false;
		}
		Block();
		$( '#print_sticker_html' ).html( '' );
		$( '#print_sticker_html_modal' ).modal( 'hide' );
		let form = $( '.form-filter' ).serialize() + '&print_name=""&job_status=0&page=1&pagesize=99999999999999999999';
		$.ajax( {
			url: DOMAIN_URL + 'jobs/get_print_sticker',
			method: 'post',
			data: form,
			success: function( data ) {
				UnBlock();
				$( '#print_sticker_html' ).html( data );
				$( '#print_sticker_html_modal' ).modal( 'show' );
			}
		} );
	} );

	// onchange print fitter
	$( document ).on( 'change', '#fitter', function( e ) {
		e.preventDefault();
		let id = this.value;
		if ( empty( id ) ) {
			return false;
		}
		Block();
		$( '#fitter_html' ).html( '' );
		$( '#print_job_html_modal' ).modal( 'hide' );
		let form = $( '.form-filter' ).serialize() + '&job_status=0&fitter_id=' + id + '&page=1&pagesize=99999999999999999999';
		$.ajax( {
			url: DOMAIN_URL + 'jobs/get_print_jobs',
			method: 'post',
			data: form,
			success: function( data ) {
				UnBlock();
				$( '#print_job_html_modal' ).modal( 'show' );
				$( '#fitter_html' ).html( data );
			}
		} );
		$( this ).val( '' );
	} );

	// change job status
	$( document ).on( 'click', '.job_status', function( e ) {
		e.preventDefault();
		Page = 1;
		$( '#page' ).val( Page );
		$( '#order' ).val( 'DESC' );
		$( '#filter_search' ).val( '' );
		$( '#tbody' ).unmark( markjs_options );
		let status = $( this ).attr( 'data-status' );
		let form = $( '.form-filter' ).serialize() + '&job_status=' + status;
		Block();
		$.ajax( {
			url: DOMAIN_URL + 'jobs/get_jobs',
			method: 'post',
			data: form,
			success: function( data ) {
				UnBlock();
				Rows = data;
				make_html();
				$( "#temp_row" ).remove();
			}
		} );
	} );
} );

function total_jobs_price( parent_id ) {
	let qty = 0;
	let price = 0;
	let expense = 0;
	let discount = 0;
	let grand_total = 0;
	let total_price = 0;
	let total_expence = 0;
	// get price from input values
	qty = parseFloat( $( 'input[name="qty[' + parent_id + ']"]' ).val() );
	price = parseFloat( $( 'input[name="price[' + parent_id + ']"]' ).val() );
	discount = parseFloat( $( 'input[name="discount[' + parent_id + ']"]' ).val() );
	expense = parseFloat( $( 'input[name="expense[' + parent_id + ']"]' ).val() );
	// Sum prices
	total_price = parseFloat( total_price ) + price;
	total_expence = parseFloat( total_expence ) + expense;
	grand_total = parseFloat( grand_total ) + parseFloat( price ) + ((qty - 1) * parseFloat( price )) * (parseFloat( discount ) / 100);
	// grand total
	grand_total = parseFloat( total_expence ) + parseFloat( grand_total );
	$( '.job-total-price_' + parent_id ).html( '&pound;' + number_format( parseFloat( total_price ), 1 ) );
	$( '.job-expense-price_' + parent_id ).html( '&pound;' + number_format( parseFloat( total_expence ), 1 ) );
	$( '.all-total-price_' + parent_id ).html( '&pound;' + number_format( parseFloat( grand_total ), 1 ) );
}

function get_tobtype_option( id, jobid, print_name, position ) {
	if ( empty( jobid ) ) {
		console.log( 'Job id missing' );
		return false;
	}
	let html = '';

	$.ajax( {
		url: DOMAIN_URL + 'jobs/get_jobtype_fields',
		method: 'post',
		data: { id: jobid },
		success: function( d ) {
			if ( isset( d.print_name ) && d.print_name == 'Y' ) {
				html += '<div class="col-md-4">\n' +
				        '<div class="form-group form-md-line-input has-success">\n' +
				        '<input type="text" name="print_name[' + id + ']" class="form-control edited input-sm" placeholder="Print Name" value="' + print_name + '" required="required"><label>Print\n' +
				        'Name <span class="rfield">*</span></label>\n' +
				        '</div>\n' +
				        '</div>';
			}

			if ( isset( d.position ) && d.position == 'Y' ) {
				html += '<div class="col-md-4">\n' +
				        '<div class="form-group form-md-line-input has-success">\n' +
				        '<input type="text" name="position[' + id + ']" class="form-control edited input-sm" placeholder="Position" value="' + position + '"><label>Position' +
				        '</label>\n' +
				        '</div>\n' +
				        '</div>';
			}

			$( '#jobtype_option_' + id ).html( html )
		}
	} );

}

function load_data() {
	Block();
	$.ajax( {
		url: DOMAIN_URL + 'jobs/get_jobs',
		method: 'post',
		data: $( '.form-filter' ).serialize(),
		success: function( data ) {
			UnBlock();
			Rows = data;
			make_html();
			$( "#temp_row" ).remove();
		}
	} );
}

function make_html() {
	$( "#total_records" ).html( '<b>(' + Rows.total_records + ')</b>' );
	HTML = tmpl( 'load_jobs', Rows.rows );
	if ( Page > 1 ) {
		$( '#tbody' ).append( HTML );
	} else {
		$( '#tbody' ).html( HTML );
	}
	is_loading = false;
	if ( !empty( $( '#filter_search' ).val() ) ) {
		$( '#tbody' ).mark( $( '#filter_search' ).val(), markjs_options );
	}
	UnBlock();
}

/***********************************************/
/***********************************************/
/***********************************************/

/***********************************************/

function load_jobtype( id, val ) {
	if ( empty( id ) ) {
		return false;
	}
	$.ajax( {
		url: DOMAIN_URL + 'jobtype/load_data',
		method: 'post',
		data: {
			status: '1',
			order: 'ASC',
			orderby: 'name',
			pagesize: 999999,
		},
		success: function( data ) {
			let option = '<option value="">Select Job Type</option>';
			if ( !empty( data.rows ) ) {
				$.each( data.rows, function( i, v ) {
					option += '<option value="' + v.id + '">' + ucfirst( v.description ) + '</option>';
				} );
				$( id ).html( option );
				if ( !empty( val ) ) {
					$( id ).val( val );
				}
				$( '#changejobtype' ).select2( 'val', '' );
			}
		}
	} );
}

function get_postcode() {
	$.ajax( {
		url: DOMAIN_URL + 'jobs/get_postcode',
		method: 'post',
		success: function( data ) {
			if ( !empty( data ) ) {
				let option = '<option value="">Post Code</option>';
				$.each( data, function( i, v ) {
					option += '<option value="' + v.postcode + '">' + ucfirst( v.postcode ) + '</option>';
				} );
				$( '#changepostcode' ).html( option );
				$( '#changepostcode' ).select2( 'val', '' );
			}
		}
	} );
}

function load_users() {
	$.ajax( {
		url: DOMAIN_URL + 'staff/load_data',
		method: 'post',
		data: {
			orderby: 'username',
			order: 'ASC',
			//type: type,
			is_active: 1,
			pagesize: 999999,
		},
		success: function( data ) {
			if ( !empty( data.rows ) ) {
				let fitter_name = '<option value="">Job Print</option>';
				let client_name = '<option value="">Client Name</option>';

				$.each( data.rows, function( i, v ) {
					if ( v.type == 'fitter' ) {
						fitter_name += '<option value="' + v.id + '">' + ucfirst( v.username ) + '</option>';
					} else if ( v.type == 'client' ) {
						client_name += '<option value="' + v.id + '">' + ucfirst( v.username ) + '</option>';
					}
				} );

				$( '#fitter' ).html( fitter_name );
				$( '#client_id' ).html( client_name );

				$( '#changeclientid' ).html( client_name );
				$( '#changeclientid' ).select2( 'val', '' );

				$( '#changefitter' ).html( fitter_name );
				$( '#changefitter' ).select2( 'val', '' );
			}
		}
	} );
}

function load_clients( type = 'client' ) {
	$.ajax( {
		url: DOMAIN_URL + 'staff/load_data',
		method: 'post',
		data: {
			orderby: 'username',
			order: 'ASC',
			type: type,
			is_active: 1,
			pagesize: 999999,
		},
		success: function( data ) {

			if ( type == 'client' ) {
				if ( !empty( data.rows ) ) {
					let option = '<option value="">Select Client Name</option>';
					$.each( data.rows, function( i, v ) {
						option += '<option value="' + v.id + '">' + ucfirst( v.username ) + '</option>';
					} );
					$( '#client_id' ).html( option );
				}
			} else if ( type == 'fitter' ) {
				if ( !empty( data.rows ) ) {
					let option = '<option value="">Select Fitter</option>';
					$.each( data.rows, function( i, v ) {
						option += '<option value="' + v.id + '">' + ucfirst( v.username ) + '</option>';
					} );
					$( '#fitter' ).html( option );
					$( '#changefitter' ).html( option );
					$( '#changefitter' ).select2( 'val', '' );
				}
			}
		}
	} );
}

function load_fitter_users( id, val ) {
	$.ajax( {
		url: DOMAIN_URL + 'staff/load_data',
		method: 'post',
		data: {
			type: 'fitter',
			order: 'ASC',
			orderby: 'username',
			is_active: '1',
			pagesize: 999999,
		},
		success: function( data ) {
			let option = '<option value="">Select Fitter</option>';
			if ( !empty( data.rows ) ) {
				$.each( data.rows, function( i, v ) {
					option += '<option value="' + v.id + '">' + ucfirst( v.username ) + '</option>';
				} );
				$( id ).html( option );
				if ( !empty( val ) ) {
					$( id ).val( val );
				}
			}
		}
	} );
}

/***********************************************/
/***********************************************/
/***********************************************/
/***********************************************/

// This example displays an address form, using the autocomplete feature
// of the Google Places API to help users fill in the information.

function initial( lat = 55.953252, lng = -3.188266999999996 ) {
	$( '#latitude' ).val( lat );
	$( '#longitude' ).val( lng );
	mylocation = new google.maps.LatLng( lat, lng );
	map = new google.maps.Map( document.getElementById( 'map' ), {
		zoom: 13,
		mapTypeId: google.maps.MapTypeId.ROADMAP,
		center: { lat: lat, lng: lng },
	} );
	marker = new google.maps.Marker( {
		position: mylocation,
		map: map,
		draggable: true
	} );
	google.maps.event.addListener(
		marker,
		'drag',
		function() {
			let latlng = marker.position.lat() + ',' + marker.position.lng();
			$.ajax( {
				url: 'https://maps.googleapis.com/maps/api/geocode/json?latlng=' + latlng + '&key=AIzaSyALtf8vQux4gEiDEeoG0nkZROKYOsvSwmk',
				success: function( data ) {
					$( '#autocomplete' ).val( data.results[ 0 ].formatted_address );
					$( '#locality' ).val( data.results[ 0 ].address_components[ 3 ].short_name );
					for ( var i = 0; i < data.results[ 0 ].address_components.length; i++ ) {
						var addressType = data.results[ 0 ].address_components[ i ].types[ 0 ];
						if ( componentForm[ addressType ] ) {
							var val = data.results[ 0 ].address_components[ i ][ componentForm[ addressType ] ];
							document.getElementById( addressType ).value = val;
						}
					}
				}
			} );
		}
	);
}

//start of modal google map
function codeAddress() {
	var geocoder = new google.maps.Geocoder();
	var address = document.getElementById( 'autocomplete' ).value;
	geocoder.geocode( { 'address': address }, function( results, status ) {
		if ( status == 'OK' ) {
			// remove or delete marker of map
			marker.setMap( null );
			let location = results[ 0 ].geometry.location;
			let loc = location.toString();
			loc = explode( ',', loc );
			let lat = trim( str_replace( '(', '', loc[ 0 ] ) );
			let lng = trim( str_replace( ')', '', loc[ 1 ] ) );
			$( '#latitude' ).val( lat );
			$( '#longitude' ).val( lng );
			map.setCenter( results[ 0 ].geometry.location );
			marker = new google.maps.Marker( {
				map: map,
				draggable: true,
				position: results[ 0 ].geometry.location
			} );
			google.maps.event.addListener(
				marker,
				'drag',
				function() {
					let latlng = marker.position.lat() + ',' + marker.position.lng();
					$.ajax( {
						url: 'https://maps.googleapis.com/maps/api/geocode/json?latlng=' + latlng + '&key=AIzaSyALtf8vQux4gEiDEeoG0nkZROKYOsvSwmk',
						success: function( data ) {
							$( '#autocomplete' ).val( data.results[ 0 ].formatted_address );
							$( '#locality' ).val( data.results[ 0 ].address_components[ 3 ].short_name );
							for ( var i = 0; i < data.results[ 0 ].address_components.length; i++ ) {
								var addressType = data.results[ 0 ].address_components[ i ].types[ 0 ];
								if ( componentForm[ addressType ] ) {
									var val = data.results[ 0 ].address_components[ i ][ componentForm[ addressType ] ];
									document.getElementById( addressType ).value = val;
								}
							}
						}
					} );
				}
			);
		} else {
			Error( 'Geocode was not successful for the following reason: ' + status );
		}
	} );
}

function initAutocomplete() {
	// Create the autocomplete object, restricting the search to geographical
	// location types.
	// autocomplete = new google.maps.places.Autocomplete(
	// 	/** @type {!HTMLInputElement} */
	// 	(document.getElementById( 'autocomplete' )),
	// 	{ types: ['geocode'] } );

	var input = document.getElementById( 'autocomplete' );
	var options = {
		types: ['geocode'],
		componentRestrictions: { country: 'uk' }
	};

	autocomplete = new google.maps.places.Autocomplete( input, options );

	// When the user selects an address from the dropdown, populate the address
	// fields in the form.
	autocomplete.addListener( 'place_changed', fillInAddress );
}

function fillInAddress() {
	loading( 'add_job' );
	var place = autocomplete.getPlace();
	var geocoder = new google.maps.Geocoder();
	geocoder.geocode( { 'address': place.formatted_address }, function( results, status ) {
		if ( status == 'OK' ) {
			let location = results[ 0 ].geometry.location;
			let loc = location.toString();
			loc = explode( ',', loc );
			let lat = trim( str_replace( '(', '', loc[ 0 ] ) );
			let lng = trim( str_replace( ')', '', loc[ 1 ] ) );
			let latlng = lat + ',' + lng;
			$.ajax( {
				url: 'https://maps.googleapis.com/maps/api/geocode/json?latlng=' + latlng + '&key=AIzaSyALtf8vQux4gEiDEeoG0nkZROKYOsvSwmk',
				success: function( data ) {
					unloading( 'add_job' );
					//$( '#autocomplete' ).val( data.results[ 0 ].formatted_address );
					$( '#locality' ).val( data.results[ 0 ].address_components[ 3 ].short_name );
					for ( var i = 0; i < data.results[ 0 ].address_components.length; i++ ) {
						var addressType = data.results[ 0 ].address_components[ i ].types[ 0 ];
						if ( componentForm[ addressType ] ) {
							var val = data.results[ 0 ].address_components[ i ][ componentForm[ addressType ] ];
							document.getElementById( addressType ).value = val;
						}
					}
				}
			} );
		} else {
			Error( 'Geocode was not successful for the following reason: ' + status );
		}
	} );
	codeAddress();
}

// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
	if ( navigator.geolocation ) {
		navigator.geolocation.getCurrentPosition( function( position ) {
			var geolocation = {
				lat: position.coords.latitude,
				lng: position.coords.longitude
			};
			var circle = new google.maps.Circle( {
				center: geolocation,
				radius: position.coords.accuracy
			} );
			autocomplete.setBounds( circle.getBounds() );
		} );
	}
}