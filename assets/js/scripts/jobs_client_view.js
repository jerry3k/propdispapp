// This file is generated by Nasir Scripts
var Page = 1;
var Rows = '';
var is_loading = true;
var placeSearch, autocomplete, map, marker, infoWindow, mylocation;
var componentForm = {
	street_number: 'short_name',
	route: 'long_name',
	locality: 'long_name',
	administrative_area_level_1: 'short_name',
	country: 'long_name',
	postal_code: 'short_name'
};

// horizental scroll data
const slider = document.querySelector( '.scroll_div' );
let isDown = false;
let startX;
let scrollLeft;
slider.addEventListener( 'mousedown', ( e ) => {
	isDown = true;
	slider.classList.add( 'active' );
	startX = e.pageX - slider.offsetLeft;
	scrollLeft = slider.scrollLeft;
} );
slider.addEventListener( 'mouseleave', () => {
	isDown = false;
	slider.classList.remove( 'active' );
} );
slider.addEventListener( 'mouseup', () => {
	isDown = false;
	slider.classList.remove( 'active' );
} );
slider.addEventListener( 'mousemove', ( e ) => {
	if ( !isDown ) {
		return;
	}
	e.preventDefault();
	const x = e.pageX - slider.offsetLeft;
	const walk = (x - startX) * 3; //scroll-fast
	slider.scrollLeft = scrollLeft - walk;
} );


$( function() {
	load_data();
	$( '#form1 #client_id2' ).attr( {
		"readonly": true,
		"style": "pointer-events: block",
	} );
	// ***************** Add Job Data *****************
	$( document ).on( 'click', '.add_job', function( e ) {
		e.preventDefault();
		$( '#map' ).html( '' );
		$( '.row-border' ).remove();
		$( '.load_subjob' ).html( '' );
		$( '.get-sub-jobs' ).html( '' );
		$( '#add_job' ).modal( 'show' );
		// empty form value
		$( "#form1 input[name=id]" ).val( '0' );
		// Reset form button
		$( '#form1 #btn_reset' ).trigger( 'click' );
		if ( $( '.lmsg' ).length === 0 ) {
			let h = '<h2 class="lmsg center">Click the button to "Add Job" for more jobs\n' +
			        'create.</h2>';
			$( '.load_subjob' ).prepend( h );
		}
	} );

	$( document ).on( 'click', '.subjob_modal', function( e ) {
		e.preventDefault();
		let id = $( this ).attr( 'data-id' );
		$( '#add_subjob' ).modal( 'show' );
		$( '.subjob-field' ).html( '' );
		$( '#form2 #btn_reset2' ).trigger( 'click' );
		setTimeout( function() {
			$( "#form2 input[name=id]" ).val( id );
			$( '#subjob_type' ).attr( 'data-id', id );
			load_alljobtype( '#subjob_type' );
		}, 300 );

	} );

	// submit form2
	$( document ).on( 'submit', '#form2', function( e ) {
		e.preventDefault();
		loading( 'add_subjob' );
		$( '#form2' ).ajaxSubmit( {
			data: { client_id: $( '#client_id' ).val() },
			success: function( data ) {
				unloading( 'add_subjob' );
				if ( data.substr( 0, 2 ) == 'OK' ) {
					let id = $( "#form2 input[name=id]" ).val();
					load_row_data( id );
					$( '#add_subjob' ).modal( 'hide' );
					Success( 'Job saved successfully.' );
				} else {
					Error( data );
				}
			},
		} );
	} );

	// ***************** Edit Job Data *****************
	$( document ).on( 'click', '.edit_job', function( e ) {
		e.preventDefault();
		let id = $( this ).attr( 'data-id' );
		Block();
		$.ajax( {
			url: DOMAIN_URL + 'jobs/get_jobs_client',
			method: 'post',
			data: { id: id },
			success: function( res ) {
				UnBlock();
				let rows = res.rows;
				$( '#add_job' ).modal( 'show' );
				$( '.get-sub-jobs' ).html( '' );
				let html = tmpl( 'load_jobs_tab_data', rows );
				setTimeout( function() {
					// Address field data
					if ( !empty( rows[ 0 ].address1 ) ) {
						setTimeout( function() {
							codeAddress()
							$( '#autocomplete' ).focus();
							$( '#form1 #autocomplete' ).val( rows[ 0 ].address1 );
							$( '#form1 #locality' ).val( rows[ 0 ].city );
							$( '#form1 #postal_code' ).val( rows[ 0 ].postcode );
							$( '#form1 #street_number' ).val( rows[ 0 ].address2 );
							$( '#form1 #route' ).val( rows[ 0 ].address3 );
						}, 300 );
					}
					$( '.get-sub-jobs' ).html( html );
				}, 50 );
			}
		} );
	} );

	// submit form
	$( document ).on( 'submit', '#form1', function( e ) {
		e.preventDefault();
		loading( 'add_job' );
		$( '#form1' ).ajaxSubmit( {
			success: function( data ) {
				unloading( 'add_job' );
				if ( data.substr( 0, 2 ) == 'OK' ) {
					load_data();
					$( '#add_job' ).modal( 'hide' );
					Success( 'Job saved successfully.' );
				} else {
					Error( data );
				}
			},
		} );
	} );

	// search shop data
	$( document ).on( 'keypress', '#filter_search', function( e ) {
		if ( e.which == 13 ) {
			Page = 1;
			$( '#page' ).val( '1' );
			$( '#order' ).val( 'DESC' );
			load_data();
		}
	} );

	// Reset search
	$( document ).on( 'click', '.reset_search', function( e ) {
		e.preventDefault();
		Page = 1;
		$( '#page' ).val( '1' );
		$( '#type' ).val( '' );
		$( '#time_to' ).val( '' );
		$( '#time_from' ).val( '' );
		$( '#order' ).val( 'DESC' );
		$( '#filter_search' ).val( '' );
		$( '#tbody' ).unmark( markjs_options );
		load_data();
	} );

	// trigger model
	$( document ).on( 'shown.bs.modal , hide.bs.modal', '#add_job', function() {
		initial();
		google.maps.event.trigger( map, "resize" );
		map.setCenter( mylocation );
	} );

	// window scroll pagenation
	$( document ).on( 'scroll', function() {
		if ( Page >= Rows.pages ) {
			return false;
		}
		if ( Page < Rows.pages && !is_loading && $( window ).scrollTop() + $( window ).height() >= $( document ).height() - 400 ) { //if user scrolled to bottom of the page
			Page++;
			is_loading = true;
			$( '#page' ).val( Page );

			if ( Page > 1 ) {
				$( "#tbody" ).append( "<tr id='temp_row'><td class='center' colspan='4'><i class='fa fa-spin fa-spinner'></i> Loading ....</td></tr>" );
			}
			load_data();
		}
	} );

	// window scroll on mouse wheel
	window.addEventListener( "wheel", function( e ) {
		if ( Page >= Rows.pages ) {
			return false;
		}
		let windowHeight = $( window ).height();
		let windowScrooll = $( window ).scrollTop();
		let documentHeight = $( document ).height();
		console.log( windowScrooll );
		if ( Page < Rows.pages && !is_loading && windowHeight + windowScrooll >= documentHeight - 400 ) { //if user scrolled to bottom of the page
			Page++;
			is_loading = true;
			$( '#page' ).val( Page );

			if ( Page > 1 ) {
				$( "#tbody" ).append( "<tr id='temp_row'><td class='center' colspan='4'><i class='fa fa-spin fa-spinner'></i> Loading ....</td></tr>" );
			}

			load_data();
		}
	} );

	// date range method
	var start = moment().subtract( 29, 'days' );
	var end = moment().endOf( 'month' );
	$( '#reportrange span' ).html( '' );
	$( '#reportrange' ).on( 'apply.daterangepicker', function( ev, picker ) {
		let fromtDate = picker.startDate;
		let toDate = picker.endDate;
		$( '#time_to' ).val( toDate );
		$( '#time_from' ).val( fromtDate );
		Page = 1;
		$( "#page" ).val( Page );
		load_data();
	} );
	$( '#reportrange' ).daterangepicker( {
		opens: (Metronic.isRTL() ? 'left' : 'right'),
		startDate: start,
		endDate: end,
		minDate: '01/01/2016',
		maxDate: date( "m/t/Y" ),
		dateLimit: {
			days: 9999
		},
		showDropdowns: true,
		showWeekNumbers: true,
		timePicker: false,
		timePickerIncrement: 1,
		timePicker12Hour: true,
		applyClass: 'green',
		format: 'DD-MM-YYYY',
		separator: ' to ',
		locale: {
			applyLabel: 'Search',
			fromLabel: 'From',
			toLabel: 'To',
			customRangeLabel: 'Custom Range',
			daysOfWeek: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
			monthNames: [
				'January',
				'February',
				'March',
				'April',
				'May',
				'June',
				'July',
				'August',
				'September',
				'October',
				'November',
				'December'
			],
			firstDay: 1
		},
		ranges: {
			'Today': [moment(), moment()],
			'Yesterday': [moment().subtract( 1, 'days' ), moment().subtract( 1, 'days' )],
			'Last 7 Days': [moment().subtract( 6, 'days' ), moment()],
			'Last 30 Days': [moment().subtract( 29, 'days' ), moment()],
			'This Month': [moment().startOf( 'month' ), moment().endOf( 'month' )],
			'Last Month': [
				moment().subtract( 1, 'month' ).startOf( 'month' ),
				moment().subtract( 1, 'month' ).endOf( 'month' )
			]
		},
	}, function( start, end ) {
		$( '#reportrange span' ).html( '' );
	} );

	//	*********** Add sub jobs ************

	// add sub job with div data
	$( document ).on( 'click', '.add_subjob', function( e ) {
		e.preventDefault();
		$( '.lmsg' ).hide();
		let uid = uniqueID( 5 );
		let today = new Date();
		load_jobtype( '#job_type_' + uid );
		let current_date = today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();
		let html = '<div class="row row-border jobrow_' + uid + '">' +
		           '<div class="hidden">' +
		           '<input name="eid[' + uid + ']" value="0">' +
		           '<input name="rowid[]" value="' + uid + '">' +
		           '</div>' +
		           '<div class="col-md-12">' +
		           '<a class="pointer btn btn-sm del_subjob red" data-id="' + uid + '"' +
		           'title="Delete Job"><i class="fa fa-times"></i></a>' +
		           '</div>' +
		           '<div class="col-md-12">' +
		           '<div class="job-box">' +

		           '<div class="col-md-4">' +
		           '<label class="tl-color">Job Type <span class="rfield">*</span></label>' +
		           '<select class="form-control change_jobtype" data-id="' + uid + '"' +
		           'name="job_type[' + uid + ']" id="job_type_' + uid + '"' +
		           'required="required">' +
		           '</select>' +
		           '</div>' +
		           '<div class="cjt-field_' + uid + '"></div>' +

		           '<div class="col-md-12 clearfix margin-tb-20 line-sperator"></div>' +

		           // '<div class="col-md-4">' +
		           // '<div class="form-group form-md-line-input has-success">' +
		           // '<input type="text" name="enter_date[' + uid + ']"' +
		           // 'class="form-control edited input-sm readonly"' +
		           // 'value="' + my_date( current_date ) + '"' +
		           // 'placeholder="Date Entered"' +
		           // 'required="required" readonly="readonly">' +
		           // '<label>Date Entered<span class="rfield">*</span></label>' +
		           // '</div>' +
		           // '</div>' +

		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input has-success">' +
		           '<input type="text"' +
		           'class="form-control input-sm edited"' +
		           'name="poref[' + uid + ']"' +
		           'placeholder="PO/Ref Number">' +
		           '<label>PO/Ref Number</label>' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input has-success">' +
		           '<input type="text" name="access[' + uid + ']"' +
		           'class="form-control input-sm edited"' +
		           'placeholder="Access"' +
		           '>' +
		           '<label>Access</label>' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input has-success">' +
		           '<input type="text" name="keys_text[' + uid + ']"' +
		           'class="form-control input-sm edited"' +
		           'placeholder="Keys">' +
		           '<label>Keys</label>' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-4">' +
		           '<div class="form-group form-md-line-input has-success">' +
		           '<input type="text" name="appointment[' + uid + ']"' +
		           'placeholder="Appointment"' +
		           'class="form-control input-sm edited"' +
		           '>' +
		           '<label>Appointment</label>' +
		           '</div>' +
		           '</div>' +
		           '<div class="col-md-12">' +
		           '<div class="form-group form-md-line-input pt0 has-success">' +
		           '<textarea class="form-control"' +
		           '          name="comments[' + uid + ']" rows="4"' +
		           '          placeholder="Your Comments..."></textarea>' +
		           '</div>' +
		           '</div>' +
		           '</div>' +
		           '</div>' +
		           '</div>';

		$( '.load_subjob' ).prepend( html );
	} );

	// add job type on change method
	$( document ).on( 'change', '.change_jobtype', function( e ) {
		e.preventDefault();
		let id = this.value;
		let parent_id = $( this ).attr( 'data-id' ); // uid for job type
		if ( empty( id ) ) {
			Error( 'Please select job type.' );
			return false;
		}

		// ********** Check if client name is selected or not ********** \\
		let client_id = $( '#client_id2 option:selected' ).val();
		if ( empty( client_id ) ) {
			Error( 'Please select a client name.' );
			$( '#job_type_' + parent_id ).val( '' );
			$( '.ptab' ).trigger( 'click' );
			return false;
		}
		// **************** Get job type data ****************

		Block();
		$.ajax( {
			url: DOMAIN_URL + 'jobs/get_jobtype_price',
			method: 'post',
			data: {
				client_id: client_id,
				type_id: id
			},
			success: function( result ) {
				UnBlock();
				let price = 0;
				let expense = 0;
				let row = '';
				if ( empty( result.rows ) ) {
					Error( 'No record found against this job!' );
					return false;
				}
				row = result.rows;
				if ( !empty( result.price ) ) {
					price = result.price;
				}
				if ( !empty( result.expense ) ) {
					expense = result.expense;
				}

				let html = '';
				let uid = uniqueID( 5 );
				let today = new Date();
				let current_date = today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();

				html += '<div class="hidden">' +
				        '<input name="discount[' + parent_id + ']" value="' + row.discount + '">' +
				        '<input name="price[' + parent_id + ']" data-id="' + uid + '" data-parent_id="' + parent_id + '" value="' + price + '">' +
				        '<input name="expense[' + parent_id + ']" data-id="' + uid + '" data-parent_id="' + parent_id + '" value="' + expense + '">' +
				        '</div>';

				html += '<div class="col-md-4">' +
				        '<div class="form-group form-md-line-input has-success">' +
				        '<input readonly type="text" name="job_date[' + parent_id + ']"' +
				        'class="form-control edited input-sm readonly"' +
				        'value="' + my_date( current_date ) + '"' +
				        'placeholder="Select Date">' +
				        '<label>Date <span class="rfield">*</span></label>' +
				        '</div>' +
				        '</div>';

				if ( !empty( row.print_name ) && row.print_name != 'N' ) {
					html += '<div class="col-md-4">' +
					        '<div class="form-group form-md-line-input has-success">' +
					        '<input type="text" name="print_name[' + parent_id + ']"' +
					        'class="form-control edited input-sm"' +
					        'placeholder="Print Name" required="required">' +
					        '<label>Print Name <span class="rfield">*</span></label>' +
					        '</div>' +
					        '</div>';
				}

				if ( !empty( row.position ) && row.position != 'N' ) {
					html += '<div class="col-md-4">' +
					        '<div class="form-group form-md-line-input has-success">' +
					        '<input type="text" name="position[' + parent_id + ']"' +
					        'class="form-control edited input-sm"' +
					        'placeholder="Position">' +
					        '<label>Position</label>' +
					        '</div>' +
					        '</div>';
				}

				html += '<div class="col-md-4">' +
				        '<div class="form-group form-md-line-input has-success">' +
				        '<input type="number" name="qty[' + parent_id + ']"' +
				        'data-id="' + uid + '"' +
				        'data-parent_id="' + parent_id + '"' +
				        'class="form-control edited input-sm change_qty"' +
				        'value="1"' +
				        'placeholder="Qty">' +
				        '<label>Qty</label>' +
				        '</div>' +
				        '</div>';
				$( '.change_price' ).blur();
				$( '.cjt-field_' + parent_id ).html( html );
			}
		} );
	} );

	// delete sub job row
	$( document ).on( 'click', '.del_subjob', function( e ) {
		e.preventDefault();
		let id = $( this ).attr( 'data-id' );
		$( '.jobrow_' + id ).remove();
		let numRows = $( '.row-border' ).length;
		if ( empty( numRows ) ) {
			$( '.lmsg' ).show();
		}
	} );

	// on change subjob
	$( document ).on( 'change', '#subjob_type', function( e ) {
		e.preventDefault();
		let id = this.value;
		let client_id = $( '#client_id' ).val();
		if ( empty( id ) ) {
			Error( 'Please select job type.' );
			return false;
		}
		Block();
		$.ajax( {
			url: DOMAIN_URL + 'jobs/get_jobtype_price',
			method: 'post',
			data: {
				client_id: client_id,
				type_id: id
			},
			success: function( result ) {
				UnBlock();
				let price = 0;
				let expense = 0;
				let row = '';
				if ( empty( result.rows ) ) {
					Error( 'No record found against this job!' );
					return false;
				}
				row = result.rows;
				if ( !empty( result.price ) ) {
					price = result.price;
				}
				if ( !empty( result.expense ) ) {
					expense = result.expense;
				}

				let html = '';
				let uid = uniqueID( 5 );
				let today = new Date();
				let current_date = today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();

				html += '<div class="hidden">' +
				        '<input name="discount" value="' + row.discount + '">' +
				        '<input name="price" value="' + price + '">' +
				        '<input name="expense" value="' + expense + '">' +
				        '</div>';

				html += '<div class="col-md-4">' +
				        '<div class="form-group form-md-line-input has-success">' +
				        '<input type="text" name="job_date"' +
				        'class="form-control edited input-sm date-picker"' +
				        'value="' + my_date( current_date ) + '"' +
				        'placeholder="Select Date">' +
				        '<label>Date <span class="rfield">*</span></label>' +
				        '</div>' +
				        '</div>';

				if ( !empty( row.position ) && row.position != 'N' ) {
					html += '<div class="col-md-4">' +
					        '<div class="form-group form-md-line-input has-success">' +
					        '<input type="text" name="print_name"' +
					        'class="form-control edited input-sm"' +
					        'placeholder="Print Name" required="required">' +
					        '<label>Print Name <span class="rfield">*</span></label>' +
					        '</div>' +
					        '</div>';
				}

				if ( !empty( row.position ) && row.position != 'N' ) {
					html += '<div class="col-md-4">' +
					        '<div class="form-group form-md-line-input has-success">' +
					        '<input type="text" name="position"' +
					        'class="form-control edited input-sm"' +
					        'placeholder="Position">' +
					        '<label>Position</label>' +
					        '</div>' +
					        '</div>';
				}

				html += '<div class="col-md-4">' +
				        '<div class="form-group form-md-line-input has-success">' +
				        '<input type="number" name="qty"' +
				        'class="form-control edited input-sm change_qty"' +
				        'value="1"' +
				        'placeholder="Qty">' +
				        '<label>Qty</label>' +
				        '</div>' +
				        '</div>';
				$( '.subjob-field' ).html( html );
			}
		} );
	} );

} );

function getMonthDateRange( year, month ) {
	// month in moment is 0 based, so 9 is actually october, subtract 1 to compensate
	// array is 'year', 'month', 'day', etc
	var startDate = moment( [year, month] );
	// Clone the value before .endOf()
	var endDate = moment( startDate ).endOf( 'month' );
	let start = startDate.toDate();
	let end = endDate.toDate();
	start = moment( start ).format( 'LLL' );
	end = moment( end ).format( 'LLL' );
	$( '#time_to' ).val( end );
	$( '#time_from' ).val( start );
	Page = 1;
	$( "#page" ).val( Page );
	load_data();
}

function load_data() {
	Block();
	$.ajax( {
		url: DOMAIN_URL + 'jobs/get_jobs_client',
		method: 'post',
		data: $( '.form-filter' ).serialize(),
		success: function( data ) {
			UnBlock();
			Rows = data;
			make_html();
			$( "#temp_row" ).remove();
		}
	} );
}

function make_html() {
	$( "#total_records" ).html( '<b>(' + Rows.total_records + ')</b>' );
	HTML = tmpl( 'load_data', Rows.rows );
	if ( Page > 1 ) {
		$( "#tbody" ).append( HTML );
	} else {
		$( "#tbody" ).html( HTML );
	}
	is_loading = false;
	if ( !empty( $( '#filter_search' ).val() ) ) {
		$( '#tbody' ).mark( $( '#filter_search' ).val(), markjs_options );
	}
	UnBlock();
}

function load_row_data( id ) {
	if ( empty( id ) ) {
		Error( 'Job id missing when job updated.' );
		return false;
	}
	loading( 'tbody2_' + id );
	$.ajax( {
		url: DOMAIN_URL + 'jobs/get_jobs_client',
		method: 'post',
		data: { id: id },
		success: function( res ) {
			unloading( 'tbody2_' + id );
			$( 'tbody#tbody2_' + id ).html( tmpl( 'load_row_data', res.rows ) );
		}
	} )
}

/***********************************************/
/***********************************************/
/***********************************************/

/***********************************************/

function load_alljobtype( id ) {
	if ( empty( id ) ) {
		return false;
	}
	$.ajax( {
		url: DOMAIN_URL + 'jobtype/load_data',
		method: 'post',
		data: {
			status: '1',
			order: 'ASC',
			orderby: 'name',
			pagesize: 999999,
		},
		success: function( data ) {
			let option = '<option value="">Select Job Type</option>';
			if ( !empty( data.rows ) ) {
				$.each( data.rows, function( i, v ) {
					option += '<option value="' + v.id + '">' + ucfirst( v.name ) + '</option>';
				} );
				$( id ).html( option );
			}
		}
	} );
}

function load_jobtype( id, val ) {
	if ( empty( id ) ) {
		return false;
	}
	$.ajax( {
		url: DOMAIN_URL + 'jobtype/load_data',
		method: 'post',
		data: {
			status: '1',
			order: 'ASC',
			orderby: 'name',
			pagesize: 999999,
		},
		success: function( data ) {
			let option = '<option value="">Select Job Type</option>';
			if ( !empty( data.rows ) ) {
				$.each( data.rows, function( i, v ) {
					option += '<option value="' + v.id + '">' + ucfirst( v.description ) + '</option>';
				} );
				$( id ).html( option );
				if ( !empty( val ) ) {
					$( id ).val( val );
				}
			}
		}
	} );
}

function get_tobtype_option( id, jobid, print_name, position ) {
	if ( empty( jobid ) ) {
		console.log( 'Job id missing' );
		return false;
	}
	let html = '';
	$.ajax( {
		url: DOMAIN_URL + 'jobs/get_jobtype_fields',
		method: 'post',
		data: { id: jobid },
		success: function( d ) {
			if ( isset( d.print_name ) && d.print_name == 'Y' ) {
				html += '<div class="col-md-4">\n' +
				        '<div class="form-group form-md-line-input has-success">\n' +
				        '<input type="text" name="print_name[' + id + ']" class="form-control edited input-sm" placeholder="Print Name" value="' + print_name + '" required="required"><label>Print\n' +
				        'Name <span class="rfield">*</span></label>\n' +
				        '</div>\n' +
				        '</div>';
			}

			if ( isset( d.position ) && d.position == 'Y' ) {
				html += '<div class="col-md-4">\n' +
				        '<div class="form-group form-md-line-input has-success">\n' +
				        '<input type="text" name="position[' + id + ']" class="form-control edited input-sm" placeholder="Position" value="' + position + '"><label>Position' +
				        '</label>\n' +
				        '</div>\n' +
				        '</div>';
			}

			$( '#jobtype_option_' + id ).html( html )
		}
	} );

}

/***********************************************/
/***********************************************/
/***********************************************/
/***********************************************/

// This example displays an address form, using the autocomplete feature
// of the Google Places API to help users fill in the information.

function initial( lat = 55.953252, lng = -3.188266999999996 ) {
	$( '#latitude' ).val( lat );
	$( '#longitude' ).val( lng );
	mylocation = new google.maps.LatLng( lat, lng );
	map = new google.maps.Map( document.getElementById( 'map' ), {
		zoom: 13,
		mapTypeId: google.maps.MapTypeId.ROADMAP,
		center: { lat: lat, lng: lng },
	} );
	marker = new google.maps.Marker( {
		position: mylocation,
		map: map,
		draggable: true
	} );
	google.maps.event.addListener(
		marker,
		'drag',
		function() {
			let latlng = marker.position.lat() + ',' + marker.position.lng();
			$.ajax( {
				url: 'https://maps.googleapis.com/maps/api/geocode/json?latlng=' + latlng + '&key=AIzaSyALtf8vQux4gEiDEeoG0nkZROKYOsvSwmk',
				success: function( data ) {
					$( '#autocomplete' ).val( data.results[ 0 ].formatted_address );
					$( '#locality' ).val( data.results[ 0 ].address_components[ 3 ].short_name );
					for ( var i = 0; i < data.results[ 0 ].address_components.length; i++ ) {
						var addressType = data.results[ 0 ].address_components[ i ].types[ 0 ];
						if ( componentForm[ addressType ] ) {
							var val = data.results[ 0 ].address_components[ i ][ componentForm[ addressType ] ];
							document.getElementById( addressType ).value = val;
						}
					}
				}
			} );
		}
	);
}

//start of modal google map
function codeAddress() {
	var geocoder = new google.maps.Geocoder();
	var address = document.getElementById( 'autocomplete' ).value;
	geocoder.geocode( { 'address': address }, function( results, status ) {
		if ( status == 'OK' ) {
			// remove or delete marker of map
			marker.setMap( null );
			let location = results[ 0 ].geometry.location;
			let loc = location.toString();
			loc = explode( ',', loc );
			let lat = trim( str_replace( '(', '', loc[ 0 ] ) );
			let lng = trim( str_replace( ')', '', loc[ 1 ] ) );
			$( '#latitude' ).val( lat );
			$( '#longitude' ).val( lng );
			map.setCenter( results[ 0 ].geometry.location );
			marker = new google.maps.Marker( {
				map: map,
				draggable: true,
				position: results[ 0 ].geometry.location
			} );
			google.maps.event.addListener(
				marker,
				'drag',
				function() {
					let latlng = marker.position.lat() + ',' + marker.position.lng();
					$.ajax( {
						url: 'https://maps.googleapis.com/maps/api/geocode/json?latlng=' + latlng + '&key=AIzaSyALtf8vQux4gEiDEeoG0nkZROKYOsvSwmk',
						success: function( data ) {
							$( '#autocomplete' ).val( data.results[ 0 ].formatted_address );
							$( '#locality' ).val( data.results[ 0 ].address_components[ 3 ].short_name );
							for ( var i = 0; i < data.results[ 0 ].address_components.length; i++ ) {
								var addressType = data.results[ 0 ].address_components[ i ].types[ 0 ];
								if ( componentForm[ addressType ] ) {
									var val = data.results[ 0 ].address_components[ i ][ componentForm[ addressType ] ];
									document.getElementById( addressType ).value = val;
								}
							}

						}
					} );
				}
			);
		} else {
			Error( 'Geocode was not successful for the following reason: ' + status );
		}
	} );
}

function initAutocomplete() {
	// Create the autocomplete object, restricting the search to geographical
	// location types.
	// autocomplete = new google.maps.places.Autocomplete(
	// 	/** @type {!HTMLInputElement} */
	// 	(document.getElementById( 'autocomplete' )),
	// 	{ types: ['geocode'] } );

	var input = document.getElementById( 'autocomplete' );
	var options = {
		types: ['geocode'],
		componentRestrictions: { country: 'uk' }
	};

	autocomplete = new google.maps.places.Autocomplete( input, options );

	// When the user selects an address from the dropdown, populate the address
	// fields in the form.
	autocomplete.addListener( 'place_changed', fillInAddress );

	let lat = -3.188266999999996;
	let lng = 55.953252;
	let id = $( '#client_id' ).val();
	$.ajax( {
		url: DOMAIN_URL + 'jobs/client_map_view/' + id,
		method: 'post',
		success: function( locations ) {
			let map = new google.maps.Map( document.getElementById( 'map2' ), {
				zoom: 10,
				center: new google.maps.LatLng( lng, lat ),
				mapTypeId: google.maps.MapTypeId.ROADMAP
			} );
			let infowindow = new google.maps.InfoWindow();
			let marker2, i;
			for ( i = 0; i < locations.length; i++ ) {
				marker2 = new google.maps.Marker( {
					position: new google.maps.LatLng( locations[ i ][ 1 ], locations[ i ][ 2 ] ),
					map: map,
					icon: locations[ i ][ 4 ]
				} );
				google.maps.event.addListener( marker2, 'click', (function( marker2, i ) {
					return function() {
						infowindow.setContent( locations[ i ][ 0 ] );
						infowindow.open( map, marker2 );
					}
				})( marker2, i ) );
			}
		}
	} );
}

function fillInAddress() {
	loading( 'add_job' );
	var place = autocomplete.getPlace();
	var geocoder = new google.maps.Geocoder();
	geocoder.geocode( { 'address': place.formatted_address }, function( results, status ) {
		if ( status == 'OK' ) {
			let location = results[ 0 ].geometry.location;
			let loc = location.toString();
			loc = explode( ',', loc );
			let lat = trim( str_replace( '(', '', loc[ 0 ] ) );
			let lng = trim( str_replace( ')', '', loc[ 1 ] ) );
			let latlng = lat + ',' + lng;
			$.ajax( {
				url: 'https://maps.googleapis.com/maps/api/geocode/json?latlng=' + latlng + '&key=AIzaSyALtf8vQux4gEiDEeoG0nkZROKYOsvSwmk',
				success: function( data ) {
					unloading( 'add_job' );
					//$( '#autocomplete' ).val( data.results[ 0 ].formatted_address );
					$( '#locality' ).val( data.results[ 0 ].address_components[ 3 ].short_name );
					for ( var i = 0; i < data.results[ 0 ].address_components.length; i++ ) {
						var addressType = data.results[ 0 ].address_components[ i ].types[ 0 ];
						if ( componentForm[ addressType ] ) {
							var val = data.results[ 0 ].address_components[ i ][ componentForm[ addressType ] ];
							document.getElementById( addressType ).value = val;
						}
					}

				}
			} );
		} else {
			Error( 'Geocode was not successful for the following reason: ' + status );
		}
	} );
	codeAddress();
}

// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
	if ( navigator.geolocation ) {
		navigator.geolocation.getCurrentPosition( function( position ) {
			var geolocation = {
				lat: position.coords.latitude,
				lng: position.coords.longitude
			};
			var circle = new google.maps.Circle( {
				center: geolocation,
				radius: position.coords.accuracy
			} );
			autocomplete.setBounds( circle.getBounds() );
		} );
	}
}
